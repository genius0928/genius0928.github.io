<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://genius0928.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://genius0928.github.io//" rel="alternate" type="text/html" /><updated>2023-12-07T09:55:38+09:00</updated><id>https://genius0928.github.io//feed.xml</id><title type="html">천각블로그</title><subtitle>천각블로그에서 발표한 게시글을 소개합니다.</subtitle><author><name>천각</name></author><entry><title type="html">Node.js Best Practices</title><link href="https://genius0928.github.io//papers/%EB%B8%94%EB%A1%9C%EA%B7%B8" rel="alternate" type="text/html" title="Node.js Best Practices" /><published>2023-11-27T00:00:00+09:00</published><updated>2023-11-27T00:00:00+09:00</updated><id>https://genius0928.github.io//papers/%EB%B8%94%EB%A1%9C%EA%B7%B8</id><content type="html" xml:base="https://genius0928.github.io//papers/%EB%B8%94%EB%A1%9C%EA%B7%B8"><![CDATA[<p>Node.js로 서버를 구축할 때 어떤 것을 지키면 좋을까? Best Practices에 대해 알아봅시다.</p>

<h2 id="모듈화">모듈화</h2>
<p>data, db, routes, test, utils 등으로 모듈화를 해야 합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>myapp/
|-- node_modules/
|-- routes/
|   |-- index.js
|   |-- user.js
|-- controllers/
|   |-- userController.js
|-- models/
|   |-- userModel.js
|-- middleware/
|   |-- authMiddleware.js
|-- utils/
|   |-- index.js
|-- config/
|   |-- db.js
|-- <span class="nb">test</span>/
|   |-- user.test.js
|-- dist/ 
|-- views/
|   |-- front-end/ 
|-- app.js
|-- package.json

</code></pre></div></div>

<p>db 모듈</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./db</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>express 예시</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// userRoutes.js</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nc">Router</span><span class="p">();</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">getUsers</span><span class="p">,</span> <span class="nx">addUser</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./userController</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">router</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users</span><span class="dl">'</span><span class="p">,</span> <span class="nx">getUsers</span><span class="p">);</span>
<span class="nx">router</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users</span><span class="dl">'</span><span class="p">,</span> <span class="nx">addUser</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>

</code></pre></div></div>

<h2 id="공격방어">공격방어</h2>
<p>실제로 이런식으로 .env 등에 대한 파일을 스크래핑 하려고 많은 노력을 당하게 됩니다.
이를 위해서 cloudfront를 앞단에 두어야 합니다.
<img src="/assets/img/20231127/공격당하는중.png" alt="공격당하는중" /></p>

<h3 id="cloudfront">cloudfront</h3>
<p>Amazon CloudFront는 Amazon Web Services(AWS)에서 제공하는 콘텐츠 전송 네트워크(Content Delivery Network, CDN) 서비스입니다. 이 서비스는 전 세계에 분산된 서버 네트워크를 통해 사용자에게 웹 콘텐츠와 애플리케이션을 빠르고 안정적으로 전달합니다.</p>

<ul>
  <li>저지연 및 빠른 콘텐츠 전달: CloudFront는 콘텐츠를 사용자에게 더 빠르게 전달하기 위해 지능적으로 콘텐츠를 <strong>캐시</strong>합니다. 이는 웹 사이트나 애플리케이션의 응답 시간을 개선합니다.</li>
  <li>다양한 콘텐츠 지원: 정적 및 동적 웹 콘텐츠, 스트리밍 비디오, API 호출 등 다양한 유형의 콘텐츠를 지원합니다.</li>
  <li>보안: CloudFront는 SSL/TLS를 사용하여 데이터 전송 중인 콘텐츠의 보안을 강화합니다. 또한 AWS Shield Standard와 함께 DDoS 공격으로부터 보호합니다.</li>
</ul>

<h2 id="안정적인-종료graceful-shutdown">안정적인 종료(graceful shutdown)</h2>
<p>보통의 서버는 다음과 같이 구축이 되어있습니다. 
ctrl + c 등을 통해 서버가 종료될 때 클라이언트의 요청을 모두 처리한 이후에 종료하는 것이 좋습니다. 만약 이를 안한다면 서버를 종료할 경우 클라이언트가 응답을 받지 못합니다.</p>

<blockquote>
  <p>서버 종료 -&gt; DB 종료순으로.</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">gracefulShutdown</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Shutting down gracefully</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">server</span><span class="p">.</span><span class="nf">close</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Server closed</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">client</span><span class="p">.</span><span class="nf">close</span><span class="p">().</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Database connection closed</span><span class="dl">'</span><span class="p">);</span>
            <span class="nx">process</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="c1">// Handle termination signals</span>
<span class="nx">process</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">SIGTERM</span><span class="dl">'</span><span class="p">,</span> <span class="nx">gracefulShutdown</span><span class="p">);</span>
<span class="nx">process</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">SIGINT</span><span class="dl">'</span><span class="p">,</span> <span class="nx">gracefulShutdown</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="테스트">테스트</h2>
<p>단위테스트, 통합테스트, 린팅, 엔드투엔드 테스트가 대표적입니다.</p>
<ul>
  <li>단위 테스트: 비즈니스 논리에 맞는 단위 테스트를 작성하는 것.</li>
  <li>통합 테스트: 데이터베이스와의 상호 작용을 테스트하여 모든 것이 예상대로 작동하는지 확인하는 것.</li>
  <li>린팅: ESLint 또는 이와 유사한 도구를 사용하여 코드 품질과 일관성을 강화하는 것.</li>
</ul>

<h3 id="단위테스트">단위테스트</h3>
<p>단위 테스트는 소프트웨어의 가장 작은 단위(주로 함수나 메소드)가 의도대로 작동하는지 확인하는 테스트입니다. JavaScript에서는 Jest, Mocha, Jasmine 등의 프레임워크를 사용하여 단위 테스트를 작성할 수 있습니다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// sum.js</span>
<span class="kd">function</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">sum</span><span class="p">;</span>

<span class="c1">// sum.test.js</span>
<span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./sum</span><span class="dl">'</span><span class="p">);</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">adds 1 + 2 to equal 3</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">expect</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)).</span><span class="nf">toBe</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="p">});</span>

</code></pre></div></div>
<h3 id="통합테스트">통합테스트</h3>

<p>통합 테스트(Integration Testing)는 여러 컴포넌트 또는 시스템의 서로 다른 부분이 함께 올바르게 작동하는지 확인하는 테스트 과정입니다. 단위 테스트가 개별 모듈의 기능을 검증하는 데 초점을 맞춘다면, 통합 테스트는 이러한 모듈들이 통합되었을 때 생기는 인터페이스와 흐름을 검증합니다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// test/user.test.js</span>
<span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">supertest</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../app</span><span class="dl">'</span><span class="p">);</span>

<span class="nf">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET /user/:id</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">responds with json containing a single user</span><span class="dl">'</span><span class="p">,</span> <span class="nx">done</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/user/1</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">expect</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="sr">/json/</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">expect</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nf">toEqual</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John Doe</span><span class="dl">'</span> <span class="p">});</span>
        <span class="nf">done</span><span class="p">();</span>
      <span class="p">});</span>
  <span class="p">});</span>

  <span class="nf">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">responds with 404 not found for invalid user</span><span class="dl">'</span><span class="p">,</span> <span class="nx">done</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/user/999</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">expect</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="엔드투엔드-테스트">엔드투엔드 테스트</h3>
<p>사용자의 관점에서 전체 애플리케이션의 흐름을 테스트하는 과정입니다. 이는 실제 사용자의 시나리오를 모방하여 시스템이 종단 간(end-to-end)으로 예상대로 작동하는지 확인합니다.</p>

<p>cypress를 이용한 테스팅</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Login Test</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">Visits the login page and logs in</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nf">visit</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:3000/login</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 로그인 페이지 방문</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[name="username"]</span><span class="dl">'</span><span class="p">).</span><span class="nf">type</span><span class="p">(</span><span class="dl">'</span><span class="s1">user1</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 사용자 이름 입력</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[name="password"]</span><span class="dl">'</span><span class="p">).</span><span class="nf">type</span><span class="p">(</span><span class="dl">'</span><span class="s1">password123</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 비밀번호 입력</span>
        <span class="nx">cy</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">button[type="submit"]</span><span class="dl">'</span><span class="p">).</span><span class="nf">click</span><span class="p">();</span> <span class="c1">// 로그인 버튼 클릭</span>

        <span class="nx">cy</span><span class="p">.</span><span class="nf">url</span><span class="p">().</span><span class="nf">should</span><span class="p">(</span><span class="dl">'</span><span class="s1">include</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/dashboard</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 대시보드 페이지로 리디렉션되었는지 확인</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>
<h3 id="린팅">린팅</h3>
<ul>
  <li>코드 품질 향상: 린터는 코드의 일관성을 유지하고, 읽기 쉽고 유지보수하기 쉬운 코드를 작성하도록 도와줍니다.</li>
  <li>버그 예방: 초기 단계에서 잠재적인 오류나 버그를 찾아내어 추후 발생할 수 있는 큰 문제를 예방합니다.</li>
  <li>코드 스타일 일관성: 프로젝트 전체에서 일관된 코딩 스타일을 유지할 수 있게 도와줍니다. 이는 팀 작업에 특히 중요합니다.</li>
  <li>자동화된 코드 검토: 코드 리뷰 과정에서 사소한 스타일 이슈에 시간을 낭비하는 대신, 더 중요한 구조적 문제에 집중할 수 있게 해줍니다.</li>
</ul>

<h2 id="에러-핸들링">에러 핸들링</h2>
<p>먼저 에러모니터링이 필요하다. winston 또는 Morgan과 같은 로깅 라이브러리를 사용하여 로깅하는데 미들웨어를 기반으로 하며 다음과 같이 promise나 async, await를 통해 에러핸들링하는게 좋습니다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">)()</span>

<span class="kd">const</span> <span class="nx">wrapE</span> <span class="o">=</span> <span class="nx">f</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="nf">f</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span> 
<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/a</span><span class="dl">"</span><span class="p">,</span> <span class="nf">wrapE</span><span class="p">(</span><span class="k">async</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">)</span>
  <span class="nx">res</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nf">json</span><span class="p">({</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">})</span>
<span class="p">}))</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/b</span><span class="dl">"</span><span class="p">,</span> <span class="nf">wrapE</span><span class="p">(</span><span class="k">async</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">)</span>
  <span class="nx">res</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nf">json</span><span class="p">({</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">})</span>
<span class="p">}))</span> 
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">((</span><span class="nx">error</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
  <span class="nx">res</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nf">json</span><span class="p">({</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">에러가 발생했습니다.</span><span class="dl">"</span><span class="p">})</span>
<span class="p">})</span> 
<span class="nx">app</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">서버시작, http://127.0.0.1:3000/a</span><span class="dl">"</span><span class="p">))</span> 
</code></pre></div></div>

<h2 id="그외">그외</h2>
<h3 id="pm2">pm2</h3>
<p>서버 모니터링과 안정적인 백그라운드 실행을 위해 pm2로 실행하는 것이 좋습니다. 
<img src="https://pm2.io/images/home.gif" alt="pm2" /></p>

<h3 id="db-연결을-최소화해라">DB 연결을 최소화해라</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A -&gt; DB
B -&gt; DB
</code></pre></div></div>

<p>보다는</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A -&gt; C
B -&gt; C
C -&gt; DB
</code></pre></div></div>
<p>가 낫다.</p>

<h3 id="type-체킹">type 체킹</h3>
<p>왠만하면 타입스크립트로 정적타입시스템을 도입하는게 좋다.</p>

<h3 id="date는-utc-기준으로">date는 UTC 기준으로.</h3>
<p>date 같은 경우 배포하는 서버의 타임마다 다르다. UTC를 기준으로 로직을 설게하자.</p>

<h3 id="서드파티-api를-사용할-때-주의할점">서드파티 API를 사용할 때 주의할점</h3>
<p>보통적으로 많이 일어나는 문제는 연결이 안되는 문제가 발생합니다. 여러가지 이유로 해당 API가 불안정할 수 있기 때문에 그렇습니다. 예를 들어 urllib3 라이브러리를 사용한다면 <code class="language-plaintext highlighter-rouge">urllib3.exceptions.MaxRetryError</code> 오류가 나기도 합니다.  그럴 경우 다음부분을 확인해야 합니다.</p>

<ol>
  <li><strong>인터넷 연결 확인</strong>: 나의 컴퓨터나 서버가 안정적인 인터넷 연결을 가지고 있는지 확인해야 합니다.</li>
  <li><strong>프록시 설정</strong>: 프록시 서버를 앞단에 두었다면 프록시 설정이 올바르게 구성되어 있는지 확인하세요. 잘못된 프록시 설정은 스크립트가 인터넷에 접근하는 것을 방해할 수도 있습니다.</li>
  <li><strong>타임아웃 설정</strong>: 어차피 실패는 실패입니다. 적절한 타임아웃을 걸어서 fail fast하게 유도하는 것도 하나의 방법입니다.</li>
  <li><strong>오류 처리</strong>: 뭐 어쩔 수 없습니다. 오류는 발생하니까요. 적절하게 오류처리해주어야 합니다.</li>
  <li><strong>문서 또는 지원 문의</strong>: 가장 마지막 방법입니다. 해당 API를 관리하는 부서에게 문의를 해야 합니다.</li>
</ol>

<blockquote>
  <p>오늘은 여기까지.</p>
</blockquote>]]></content><author><name>zagabi</name></author><category term="papers" /><category term="node.js, mongodb" /><summary type="html"><![CDATA[Node.js로 서버를 구축할 때 어떤 것을 지키면 좋을까? Best Practices에 대해 알아봅시다.]]></summary></entry></feed>